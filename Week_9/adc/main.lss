
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000478  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  40000000  40000000  00008478  2**2
                  ALLOC
  2 .stack        00000400  40000100  40000100  00008478  2**3
                  CONTENTS
  3 .comment      00000086  00000000  00000000  00008878  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  00008900  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000ce  00000000  00000000  000089d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000405  00000000  00000000  00008a9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001c6  00000000  00000000  00008ea3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000265  00000000  00000000  00009069  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e8  00000000  00000000  000092d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000163  00000000  00000000  000093b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f4  00000000  00000000  0000951b  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <Vectors>:
@  Mapped to Address 0.
@  Absolute addressing mode must be used.
@  Dummy Handlers are implemented as infinite loops which can be modified.

Vectors:        LDR     PC, Reset_Addr         
   0:	e59ff018 	ldr	pc, [pc, #24]	; 20 <Reset_Addr>
                LDR     PC, Undef_Addr
   4:	e59ff018 	ldr	pc, [pc, #24]	; 24 <Undef_Addr>
                LDR     PC, SWI_Addr
   8:	e59ff018 	ldr	pc, [pc, #24]	; 28 <SWI_Addr>
                LDR     PC, PAbt_Addr
   c:	e59ff018 	ldr	pc, [pc, #24]	; 2c <PAbt_Addr>
                LDR     PC, DAbt_Addr
  10:	e59ff018 	ldr	pc, [pc, #24]	; 30 <DAbt_Addr>
                NOP                            @ Reserved Vector 
  14:	e1a00000 	nop			(mov r0,r0)
                LDR     PC, IRQ_Addr
  18:	e59ff018 	ldr	pc, [pc, #24]	; 38 <IRQ_Addr>
@@                LDR     PC, [PC, #-0x0120]     @ Vector from VicVectAddr
                LDR     PC, FIQ_Addr
  1c:	e59ff018 	ldr	pc, [pc, #24]	; 3c <FIQ_Addr>

00000020 <Reset_Addr>:
  20:	00000054 	andeq	r0, r0, r4, asr r0

00000024 <Undef_Addr>:
  24:	00000040 	andeq	r0, r0, r0, asr #32

00000028 <SWI_Addr>:
  28:	00000044 	andeq	r0, r0, r4, asr #32

0000002c <PAbt_Addr>:
  2c:	00000048 	andeq	r0, r0, r8, asr #32

00000030 <DAbt_Addr>:
  30:	0000004c 	andeq	r0, r0, ip, asr #32
  34:	b9206e28 	stmltdb	r0!, {r3, r5, r9, sl, fp, sp, lr}

00000038 <IRQ_Addr>:
  38:	000000fc 	streqd	r0, [r0], -ip

0000003c <FIQ_Addr>:
  3c:	00000050 	andeq	r0, r0, r0, asr r0

00000040 <Undef_Handler>:

Reset_Addr:      .word     Reset_Handler
Undef_Addr:      .word     Undef_Handler
SWI_Addr:        .word     SWI_Handler
PAbt_Addr:       .word     PAbt_Handler
DAbt_Addr:       .word     DAbt_Handler
                 .word     0xB9206E28             @ Reserved Address 
IRQ_Addr:        .word     IRQ_Handler
FIQ_Addr:        .word     FIQ_Handler

Undef_Handler:   B       Undef_Handler
  40:	eafffffe 	b	40 <F_Bit>

00000044 <SWI_Handler>:
@@ SWI_Handler:     B       SWI_Handler
.extern SoftwareInterrupt
SWI_Handler:     B       SoftwareInterrupt  @ see swi_handler.S
  44:	ea000046 	b	164 <SoftwareInterrupt>

00000048 <PAbt_Handler>:
PAbt_Handler:    B       PAbt_Handler
  48:	eafffffe 	b	48 <PAbt_Handler>

0000004c <DAbt_Handler>:
DAbt_Handler:    B       DAbt_Handler
  4c:	eafffffe 	b	4c <DAbt_Handler>

00000050 <FIQ_Handler>:
@@ handled thru assembler wrapper (see below)
@@ IRQ_Handler:    B       IRQ_Handler
FIQ_Handler:     B       FIQ_Handler
  50:	eafffffe 	b	50 <FIQ_Handler>

00000054 <Reset_Handler>:


@ Reset Handler
@                EXPORT  Reset_Handler
.global Reset_handler
Reset_Handler:

@  Call low-level init C-function
@                IMPORT TargetResetInit
@                BL   TargetResetInit

                 .extern TargetResetInit
                 ldr     SP, =Stack_Top    @ temporary stack at Stack_Top
  54:	e59fd0e4 	ldr	sp, [pc, #228]	; 140 <.text+0x140>
                 LDR R0, =TargetResetInit
  58:	e59f00e4 	ldr	r0, [pc, #228]	; 144 <.text+0x144>
                 MOV LR, PC
  5c:	e1a0e00f 	mov	lr, pc
                 BX R0
  60:	e12fff10 	bx	r0


@  Setup Stack for each mode
                LDR     R0, =Stack_Top
  64:	e59f00d4 	ldr	r0, [pc, #212]	; 140 <.text+0x140>

@  Enter Undefined Instruction Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_UND | I_Bit | F_Bit
  68:	e321f0db 	msr	CPSR_c, #219	; 0xdb
                MOV     SP, R0
  6c:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #UND_Stack_Size
  70:	e2400000 	sub	r0, r0, #0	; 0x0

@  Enter Abort Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_ABT | I_Bit | F_Bit
  74:	e321f0d7 	msr	CPSR_c, #215	; 0xd7
                MOV     SP, R0
  78:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #ABT_Stack_Size
  7c:	e2400000 	sub	r0, r0, #0	; 0x0

@  Enter FIQ Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_FIQ | I_Bit | F_Bit
  80:	e321f0d1 	msr	CPSR_c, #209	; 0xd1
                MOV     SP, R0
  84:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #FIQ_Stack_Size
  88:	e2400000 	sub	r0, r0, #0	; 0x0

@  Enter IRQ Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_IRQ | I_Bit | F_Bit
  8c:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
                MOV     SP, R0
  90:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #IRQ_Stack_Size
  94:	e2400c01 	sub	r0, r0, #256	; 0x100

@  Enter Supervisor Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_SVC | I_Bit | F_Bit
  98:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
                MOV     SP, R0
  9c:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #SVC_Stack_Size
  a0:	e2400c01 	sub	r0, r0, #256	; 0x100

@  Enter User Mode and set its Stack Pointer
@  mt:          MSR     CPSR_c, #Mode_USR
                MSR     CPSR_c, #Mode_USR | I_Bit
  a4:	e321f090 	msr	CPSR_c, #144	; 0x90
                MOV     SP, R0
  a8:	e1a0d000 	mov	sp, r0
                SUB     SL, SP, #USR_Stack_Size
  ac:	e24dac02 	sub	sl, sp, #512	; 0x200
@  mt: Start application in USR-mode with IRQ-exceptions disabled.
@  They can be enabled at runtime thru IntEnable in swi.h/swi_handler.S.

@  Relocate .data section (Copy from ROM to RAM)
                LDR     R1, =_etext 
  b0:	e59f1090 	ldr	r1, [pc, #144]	; 148 <.text+0x148>
                LDR     R2, =_data 
  b4:	e59f2090 	ldr	r2, [pc, #144]	; 14c <.text+0x14c>
                LDR     R3, =_edata 
  b8:	e59f3090 	ldr	r3, [pc, #144]	; 150 <.text+0x150>
                CMP     R2, R3
  bc:	e1520003 	cmp	r2, r3
                BEQ     DataIsEmpty
  c0:	0a000003 	beq	d4 <DataIsEmpty>

000000c4 <LoopRel>:
LoopRel:        CMP     R2, R3 
  c4:	e1520003 	cmp	r2, r3
                LDRLO   R0, [R1], #4 
  c8:	34910004 	ldrcc	r0, [r1], #4
                STRLO   R0, [R2], #4 
  cc:	34820004 	strcc	r0, [r2], #4
                BLO     LoopRel 
  d0:	3afffffb 	bcc	c4 <LoopRel>

000000d4 <DataIsEmpty>:
DataIsEmpty:
 
@  Clear .bss section (Zero init)
                MOV     R0, #0 
  d4:	e3a00000 	mov	r0, #0	; 0x0
                LDR     R1, =__bss_start__ 
  d8:	e59f1074 	ldr	r1, [pc, #116]	; 154 <.text+0x154>
                LDR     R2, =__bss_end__ 
  dc:	e59f2074 	ldr	r2, [pc, #116]	; 158 <.text+0x158>
                CMP     R1,R2
  e0:	e1510002 	cmp	r1, r2
                BEQ     BSSIsEmpty
  e4:	0a000002 	beq	f4 <BSSIsEmpty>

000000e8 <LoopZI>:
LoopZI:         CMP     R1, R2 
  e8:	e1510002 	cmp	r1, r2
                STRLO   R0, [R1], #4 
  ec:	34810004 	strcc	r0, [r1], #4
                BLO     LoopZI 
  f0:	3afffffc 	bcc	e8 <LoopZI>

000000f4 <BSSIsEmpty>:
BSSIsEmpty:


@  Enter the C code
@                IMPORT  __main
@                LDR     R0, =__main
                .extern main
                LDR R0, =main
  f4:	e59f0060 	ldr	r0, [pc, #96]	; 15c <.text+0x15c>
                BX      R0
  f8:	e12fff10 	bx	r0

000000fc <IRQ_Handler>:


@ User Initial Stack & Heap (not used in GNU port)
@@                AREA    |.text|, CODE, READONLY

@@                IMPORT  __use_two_region_memory
@@                EXPORT  __user_initial_stackheap
@@__user_initial_stackheap

@@                LDR     R0, =  Heap_Mem
@@                LDR     R1, =(Stack_Mem + USR_Stack_Size)
@@                LDR     R2, = (Heap_Mem +      Heap_Size)
@@                LDR     R3, = Stack_Mem
@@                BX      LR


@@ IRQ_Wrapper based on Examples for
@@ AT91-ARM7TDMI AIC from Atmel,
@@ adapted to LPC23xx/24xx VIC by M. Thomas
@@ This wrapper avoids compiler-dependencies.

.set LPC_BASE_VIC, 0xFFFFF000
.set VIC_VectAddr, 0xF00

.arm
IRQ_Handler:

@- Manage Exception Entry
@- Adjust and save LR_irq in IRQ stack
            sub         lr, lr, #4
  fc:	e24ee004 	sub	lr, lr, #4	; 0x4
            stmfd       sp!, {lr}
 100:	e92d4000 	stmdb	sp!, {lr}

@- Save SPSR need to be saved for nested interrupt
            mrs         r14, SPSR
 104:	e14fe000 	mrs	lr, SPSR
            stmfd       sp!, {r14}
 108:	e92d4000 	stmdb	sp!, {lr}

@- Save and r0 in IRQ stack
            stmfd       sp!, {r0}
 10c:	e92d0001 	stmdb	sp!, {r0}

@- Load the ISR-Address from VICVectAddr
            ldr         r14, =LPC_BASE_VIC
 110:	e59fe048 	ldr	lr, [pc, #72]	; 160 <.text+0x160>
            ldr         r0 , [r14, #VIC_VectAddr]
 114:	e59e0f00 	ldr	r0, [lr, #3840]

@- Enable Interrupt and Switch in Supervisor Mode
           msr         CPSR_c, #Mode_SVC
 118:	e321f013 	msr	CPSR_c, #19	; 0x13

@- Save scratch/used registers and LR in User Stack
            stmfd       sp!, { r1-r3, r12, r14 }
 11c:	e92d500e 	stmdb	sp!, {r1, r2, r3, ip, lr}

@- Branch to the routine pointed by the VIC_VectAddr
            mov         r14, pc
 120:	e1a0e00f 	mov	lr, pc
            bx          r0
 124:	e12fff10 	bx	r0

@- Restore scratch/used registers and LR from User Stack
            ldmia       sp!, { r1-r3, r12, r14 }
 128:	e8bd500e 	ldmia	sp!, {r1, r2, r3, ip, lr}

@- Disable Interrupt and switch back in IRQ mode
            msr         CPSR_c, #I_Bit | Mode_IRQ
 12c:	e321f092 	msr	CPSR_c, #146	; 0x92

@-  Mark the End of Interrupt on the VIC
@   by writing to VICVectAddr - not needed 
@   here since already done in the ISRs
@@           ldr         r14, =LPC_BASE_VIC
@@           str         r14, [r14, #VIC_VectAddr]

@- Restore R0
            ldmia       sp!, {r0}
 130:	e8bd0001 	ldmia	sp!, {r0}

@- Restore SPSR_irq and r0 from IRQ stack
            ldmia       sp!, {r14}
 134:	e8bd4000 	ldmia	sp!, {lr}
            msr         SPSR_cxsf, r14
 138:	e16ff00e 	msr	SPSR_fsxc, lr

@- Restore adjusted  LR_irq from IRQ stack directly in the PC
            ldmia       sp!, {pc}^
 13c:	e8fd8000 	ldmia	sp!, {pc}^
 140:	40000500 	andmi	r0, r0, r0, lsl #10
 144:	00000391 	muleq	r0, r1, r3
 148:	00000478 	andeq	r0, r0, r8, ror r4
 14c:	40000000 	andmi	r0, r0, r0
 150:	00000478 	andeq	r0, r0, r8, ror r4
 154:	40000000 	andmi	r0, r0, r0
 158:	40000004 	andmi	r0, r0, r4
 15c:	000001d9 	ldreqd	r0, [r0], -r9
 160:	fffff000 	undefined instruction 0xfffff000

00000164 <SoftwareInterrupt>:
@*           (not thumb). This is the case if the functions below  *
@*           (IntEnable/IntDisable) get used.
@********************************************************************
SoftwareInterrupt:
	LDR		R0, [LR, #-4]          /* get swi instruction code (ARM-mode) */
 164:	e51e0004 	ldr	r0, [lr, #-4]
	BIC		R0, R0, #0xff000000    /* clear top 8 bits leaving swi "comment field"=number */
 168:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
	CMP		R0, #4                 /* range check */
 16c:	e3500004 	cmp	r0, #4	; 0x4
	LDRLO	PC, [PC, R0, LSL #2]   /* get jump-address from table */
 170:	379ff100 	ldrcc	pc, [pc, r0, lsl #2]
	MOVS	PC, LR                 /* if out of range: do nothing and return */
 174:	e1b0f00e 	movs	pc, lr

00000178 <SwiFunction>:
 178:	00000188 	andeq	r0, r0, r8, lsl #3
 17c:	00000198 	muleq	r0, r8, r1
 180:	000001a8 	andeq	r0, r0, r8, lsr #3
 184:	000001b8 	streqh	r0, [r0], -r8

00000188 <IRQDisable>:

SwiFunction:
.word IRQDisable
.word IRQEnable
.word FIQDisable
.word FIQEnable

IRQDisable:
	MRS		R0, SPSR
 188:	e14f0000 	mrs	r0, SPSR
	ORR		R0, R0, #I_Bit
 18c:	e3800080 	orr	r0, r0, #128	; 0x80
	MSR		SPSR_c, R0
 190:	e161f000 	msr	SPSR_c, r0
	MOVS	PC, LR
 194:	e1b0f00e 	movs	pc, lr

00000198 <IRQEnable>:

IRQEnable:
	MRS		R0, SPSR
 198:	e14f0000 	mrs	r0, SPSR
	BIC		R0, R0, #I_Bit
 19c:	e3c00080 	bic	r0, r0, #128	; 0x80
	MSR		SPSR_c, R0
 1a0:	e161f000 	msr	SPSR_c, r0
	MOVS	PC, LR
 1a4:	e1b0f00e 	movs	pc, lr

000001a8 <FIQDisable>:

FIQDisable:
	MRS		R0, SPSR
 1a8:	e14f0000 	mrs	r0, SPSR
	ORR		R0, R0, #F_Bit
 1ac:	e3800040 	orr	r0, r0, #64	; 0x40
	MSR		SPSR_c, R0
 1b0:	e161f000 	msr	SPSR_c, r0
	MOVS	PC, LR
 1b4:	e1b0f00e 	movs	pc, lr

000001b8 <FIQEnable>:

FIQEnable:
	MRS		R0, SPSR
 1b8:	e14f0000 	mrs	r0, SPSR
	BIC		R0, R0, #F_Bit
 1bc:	e3c00040 	bic	r0, r0, #64	; 0x40
	MSR		SPSR_c, R0
 1c0:	e161f000 	msr	SPSR_c, r0
	MOVS	PC, LR
 1c4:	e1b0f00e 	movs	pc, lr

000001c8 <IntEnable>:

@**********************************************************************
@*  Call SWI to enable IRQ                                            *
@*  Function : void IntEnable(void)                                   *
@*  Parameters:      None                                             *
@*  input  :         None                                             * 
@*  output :         None                                             *
@**********************************************************************
IntEnable:
	SWI     SWI_IRQ_EN
 1c8:	ef000001 	svc	0x00000001
	BX      lr
 1cc:	e12fff1e 	bx	lr

000001d0 <IntDisable>:
@ end of IntEnable

@**********************************************************************
@*  Call SWI to disable IRQ                                           *
@*  Function : void IntDisable(void)                                  *
@*  Parameters     : None                                             *
@*  input          : None                                             * 
@*  output         : None                                             *
@**********************************************************************
IntDisable:
	SWI     SWI_IRQ_DIS
 1d0:	ef000000 	svc	0x00000000
	BX      lr
 1d4:	e12fff1e 	bx	lr

000001d8 <main>:
	return(ch);
}
/*********************************** main routine ****************************************************/
int  main ()
{
 1d8:	b500      	push	{lr}
	unsigned int Fdiv,value;
	init_timer( ((72000000/100) - 1) );
 1da:	4837      	ldr	r0, [pc, #220]	(2b8 <.text+0x2b8>)
 1dc:	f000 f8b8 	bl	350 <init_timer>

	PCONP |=0X00001000;		//switch adc from disable state to enable state  
 1e0:	4936      	ldr	r1, [pc, #216]	(2bc <.text+0x2bc>)
 1e2:	2380      	movs	r3, #128
 1e4:	680a      	ldr	r2, [r1, #0]
 1e6:	015b      	lsls	r3, r3, #5
 1e8:	431a      	orrs	r2, r3
	PINSEL0 = 0x00000050; 		//Pinselection for uart tx and rx lines
 1ea:	4b35      	ldr	r3, [pc, #212]	(2c0 <.text+0x2c0>)
 1ec:	600a      	str	r2, [r1, #0]
 1ee:	2250      	movs	r2, #80
 1f0:	601a      	str	r2, [r3, #0]
	PINSEL1	= 0X01554000;		//Pinselection for adc0.0 
 1f2:	4a34      	ldr	r2, [pc, #208]	(2c4 <.text+0x2c4>)
 1f4:	3304      	adds	r3, #4

	/************** Uart initialization **********************************/

	U0LCR = 0x83;               // 8 bits, no Parity, 1 Stop bit  
 1f6:	4834      	ldr	r0, [pc, #208]	(2c8 <.text+0x2c8>)
 1f8:	601a      	str	r2, [r3, #0]
 1fa:	2383      	movs	r3, #131
 1fc:	6003      	str	r3, [r0, #0]
	Fdiv = ( 72000000 / 16 ) / 19200 ;  //baud rate  
	U0DLM = Fdiv / 256;
 1fe:	4b33      	ldr	r3, [pc, #204]	(2cc <.text+0x2cc>)
 200:	2100      	movs	r1, #0
 202:	6019      	str	r1, [r3, #0]
	U0DLL = Fdiv % 256;
 204:	22ea      	movs	r2, #234
 206:	3b04      	subs	r3, #4
 208:	601a      	str	r2, [r3, #0]
   	U0LCR = 0x03;               // DLAB = 0
 20a:	2303      	movs	r3, #3
 20c:	6003      	str	r3, [r0, #0]
   	
   	FIO4DIR=0x00;
 20e:	4b30      	ldr	r3, [pc, #192]	(2d0 <.text+0x2d0>)
	FIO3DIR=0xFF;
 210:	22ff      	movs	r2, #255
 212:	6019      	str	r1, [r3, #0]
 214:	3b20      	subs	r3, #32
 216:	601a      	str	r2, [r3, #0]
	
  	AD0CR = 0X01210F01; // Adc initialization
 218:	4a2e      	ldr	r2, [pc, #184]	(2d4 <.text+0x2d4>)
 21a:	4b2f      	ldr	r3, [pc, #188]	(2d8 <.text+0x2d8>)
 21c:	601a      	str	r2, [r3, #0]
	while(1) 
	{
		while((AD0DR0 & 0X80000000)!=0X80000000);	// Wait here until adc make conversion complete
 21e:	4a2f      	ldr	r2, [pc, #188]	(2dc <.text+0x2dc>)
 220:	6813      	ldr	r3, [r2, #0]
 222:	2b00      	cmp	r3, #0
 224:	dafb      	bge.n	21e <USR_Stack_Size+0x1e>
	
		/************* To get converted value and display it on the serial port****************/
            	value = (AD0DR0>>6)& 0x3ff ;    
 226:	6813      	ldr	r3, [r2, #0]
 228:	041b      	lsls	r3, r3, #16
 22a:	0d99      	lsrs	r1, r3, #22
 22c:	4b2c      	ldr	r3, [pc, #176]	(2e0 <.text+0x2e0>)
 22e:	681b      	ldr	r3, [r3, #0]
 230:	0698      	lsls	r0, r3, #26
 232:	d5fb      	bpl.n	22c <USR_Stack_Size+0x2c>
 234:	4b2b      	ldr	r3, [pc, #172]	(2e4 <.text+0x2e4>)
 236:	2209      	movs	r2, #9
 238:	601a      	str	r2, [r3, #0]
		serial_tx('\t');
		serial_tx(atoh((value&0x300)>>8));
 23a:	0a0b      	lsrs	r3, r1, #8
 23c:	2b09      	cmp	r3, #9
 23e:	dc02      	bgt.n	246 <USR_Stack_Size+0x46>
 240:	1c1a      	adds	r2, r3, #0
 242:	3230      	adds	r2, #48
 244:	e001      	b.n	24a <USR_Stack_Size+0x4a>
 246:	1c1a      	adds	r2, r3, #0
 248:	3237      	adds	r2, #55
 24a:	4b25      	ldr	r3, [pc, #148]	(2e0 <.text+0x2e0>)
 24c:	681b      	ldr	r3, [r3, #0]
 24e:	0698      	lsls	r0, r3, #26
 250:	d5fb      	bpl.n	24a <USR_Stack_Size+0x4a>
 252:	4b24      	ldr	r3, [pc, #144]	(2e4 <.text+0x2e4>)
 254:	601a      	str	r2, [r3, #0]
		serial_tx(atoh((value&0xf0)>>4));
 256:	060b      	lsls	r3, r1, #24
 258:	0f1b      	lsrs	r3, r3, #28
 25a:	2b09      	cmp	r3, #9
 25c:	dc02      	bgt.n	264 <USR_Stack_Size+0x64>
 25e:	1c1a      	adds	r2, r3, #0
 260:	3230      	adds	r2, #48
 262:	e001      	b.n	268 <USR_Stack_Size+0x68>
 264:	1c1a      	adds	r2, r3, #0
 266:	3237      	adds	r2, #55
 268:	4b1d      	ldr	r3, [pc, #116]	(2e0 <.text+0x2e0>)
 26a:	681b      	ldr	r3, [r3, #0]
 26c:	0698      	lsls	r0, r3, #26
 26e:	d5fb      	bpl.n	268 <USR_Stack_Size+0x68>
 270:	4b1c      	ldr	r3, [pc, #112]	(2e4 <.text+0x2e4>)
 272:	601a      	str	r2, [r3, #0]
		serial_tx(atoh(value&0x0f));
 274:	230f      	movs	r3, #15
 276:	400b      	ands	r3, r1
 278:	2b09      	cmp	r3, #9
 27a:	dc02      	bgt.n	282 <USR_Stack_Size+0x82>
 27c:	1c1a      	adds	r2, r3, #0
 27e:	3230      	adds	r2, #48
 280:	e001      	b.n	286 <USR_Stack_Size+0x86>
 282:	1c1a      	adds	r2, r3, #0
 284:	3237      	adds	r2, #55
 286:	4b16      	ldr	r3, [pc, #88]	(2e0 <.text+0x2e0>)
 288:	681b      	ldr	r3, [r3, #0]
 28a:	0698      	lsls	r0, r3, #26
 28c:	d5fb      	bpl.n	286 <USR_Stack_Size+0x86>
 28e:	4b15      	ldr	r3, [pc, #84]	(2e4 <.text+0x2e4>)
 290:	601a      	str	r2, [r3, #0]
 292:	4b13      	ldr	r3, [pc, #76]	(2e0 <.text+0x2e0>)
 294:	681b      	ldr	r3, [r3, #0]
 296:	069a      	lsls	r2, r3, #26
 298:	d5fb      	bpl.n	292 <USR_Stack_Size+0x92>
 29a:	4b12      	ldr	r3, [pc, #72]	(2e4 <.text+0x2e4>)
 29c:	220d      	movs	r2, #13
 29e:	601a      	str	r2, [r3, #0]
 2a0:	4b0f      	ldr	r3, [pc, #60]	(2e0 <.text+0x2e0>)
 2a2:	681b      	ldr	r3, [r3, #0]
 2a4:	0698      	lsls	r0, r3, #26
 2a6:	d5fb      	bpl.n	2a0 <USR_Stack_Size+0xa0>
 2a8:	4b0e      	ldr	r3, [pc, #56]	(2e4 <.text+0x2e4>)
 2aa:	220a      	movs	r2, #10
 2ac:	601a      	str	r2, [r3, #0]
		serial_tx(0x0d);
		serial_tx(0x0a);
		FIO3PIN=value&0x03f;
 2ae:	233f      	movs	r3, #63
 2b0:	1c0a      	adds	r2, r1, #0
 2b2:	401a      	ands	r2, r3
 2b4:	4b0c      	ldr	r3, [pc, #48]	(2e8 <.text+0x2e8>)
 2b6:	e7b1      	b.n	21c <USR_Stack_Size+0x1c>
 2b8:	fc7f 000a 	ldc2l	0, cr0, [pc], #-40
 2bc:	c0c4      	stmia	r0!, {r2, r6, r7}
 2be:	e01f      	b.n	300 <install_irq+0x14>
 2c0:	c000      	stmia	r0!, {}
 2c2:	e002      	b.n	2ca <.text+0x2ca>
 2c4:	4000      	ands	r0, r0
 2c6:	0155      	lsls	r5, r2, #5
 2c8:	c00c      	stmia	r0!, {r2, r3}
 2ca:	e000      	b.n	2ce <.text+0x2ce>
 2cc:	c004      	stmia	r0!, {r2}
 2ce:	e000      	b.n	2d2 <.text+0x2d2>
 2d0:	c080      	stmia	r0!, {r7}
 2d2:	3fff      	subs	r7, #255
 2d4:	0f01      	lsrs	r1, r0, #28
 2d6:	0121      	lsls	r1, r4, #4
 2d8:	4000      	ands	r0, r0
 2da:	e003      	b.n	2e4 <.text+0x2e4>
 2dc:	4010      	ands	r0, r2
 2de:	e003      	b.n	2e8 <.text+0x2e8>
 2e0:	c014      	stmia	r0!, {r2, r4}
 2e2:	e000      	b.n	2e6 <.text+0x2e6>
 2e4:	c000      	stmia	r0!, {}
 2e6:	e000      	b.n	2ea <.text+0x2ea>
 2e8:	c074      	stmia	r0!, {r2, r4, r5, r6}
 2ea:	3fff      	subs	r7, #255

000002ec <install_irq>:
** Returned value:		true or false, return false if IntNum is out of range
** 
******************************************************************************/
int install_irq( int IntNumber, void *HandlerAddr, int Priority )
{
 2ec:	b530      	push	{r4, r5, lr}
    int *vect_addr;
    int *vect_cntl;
      
    VICIntEnClr = 1 << IntNumber;	/* Disable Interrupt */
 2ee:	2301      	movs	r3, #1
 2f0:	1c0c      	adds	r4, r1, #0
 2f2:	1c19      	adds	r1, r3, #0
 2f4:	4b09      	ldr	r3, [pc, #36]	(31c <.text+0x31c>)
 2f6:	4081      	lsls	r1, r0
 2f8:	1c15      	adds	r5, r2, #0
 2fa:	6019      	str	r1, [r3, #0]
    if ( IntNumber >= 32 )
 2fc:	281f      	cmp	r0, #31
 2fe:	dd01      	ble.n	304 <install_irq+0x18>
 300:	2000      	movs	r0, #0
 302:	e007      	b.n	314 <install_irq+0x28>
    {
		return ( FALSE );
    }
    else
    {
		/* find first un-assigned VIC address for the handler */
		vect_addr = (int *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + IntNumber*4);
		vect_cntl = (int *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + IntNumber*4);
		*vect_addr = (int)HandlerAddr;	/* set interrupt vector */
 304:	4b06      	ldr	r3, [pc, #24]	(320 <.text+0x320>)
 306:	0082      	lsls	r2, r0, #2
 308:	50d4      	str	r4, [r2, r3]
		*vect_cntl = Priority;
 30a:	4b06      	ldr	r3, [pc, #24]	(324 <.text+0x324>)
 30c:	50d5      	str	r5, [r2, r3]
		VICIntEnable = 1 << IntNumber;	/* Enable Interrupt */
 30e:	4b06      	ldr	r3, [pc, #24]	(328 <.text+0x328>)
 310:	6019      	str	r1, [r3, #0]
 312:	2001      	movs	r0, #1
		return( TRUE );
    }
}
 314:	bc30      	pop	{r4, r5}
 316:	bc02      	pop	{r1}
 318:	4708      	bx	r1
 31a:	0000      	lsls	r0, r0, #0
 31c:	f014 ffff 	bl	1531e <VIC_VectAddr+0x1441e>
 320:	f100 ffff 	bl	101322 <VIC_VectAddr+0x100422>
 324:	f200 ffff 	bl	201326 <VIC_VectAddr+0x200426>
 328:	f010 ffff 	bl	1132a <VIC_VectAddr+0x1042a>

0000032c <Timer0Handler>:

/******************************************************************************
** Function name:		Timer0Handler
**
** Descriptions:		Timer/Counter 0 interrupt handler
**				executes each 10ms @ 60 MHz CPU Clock
**
** parameters:			None
** Returned value:		None
** 
******************************************************************************/
#ifdef __GNUC__
void Timer0Handler (void); // avoid missing proto warning - mthomas
#endif
void Timer0Handler (void) __irq 
{  
    T0IR = 1;			/* clear interrupt flag */
 32c:	4b05      	ldr	r3, [pc, #20]	(344 <.text+0x344>)
 32e:	2201      	movs	r2, #1
 330:	601a      	str	r2, [r3, #0]
    IENABLE;			/* handles nested interrupt */

    timer_counter++;
 332:	4a05      	ldr	r2, [pc, #20]	(348 <.text+0x348>)
 334:	6813      	ldr	r3, [r2, #0]
 336:	3301      	adds	r3, #1
 338:	6013      	str	r3, [r2, #0]

    IDISABLE;
    VICVectAddr = 0;		/* Acknowledge Interrupt */
 33a:	4b04      	ldr	r3, [pc, #16]	(34c <.text+0x34c>)
 33c:	2200      	movs	r2, #0
 33e:	601a      	str	r2, [r3, #0]
}
 340:	4770      	bx	lr
 342:	0000      	lsls	r0, r0, #0
 344:	4000      	ands	r0, r0
 346:	e000      	b.n	34a <.text+0x34a>
 348:	0000      	lsls	r0, r0, #0
 34a:	4000      	ands	r0, r0
 34c:	ff00 ffff 	undefined

00000350 <init_timer>:

/******************************************************************************
** Function name:		enable_timer
**
** Descriptions:		Enable timer
**
** parameters:			timer number: 0 or 1
** Returned value:		None
** 
******************************************************************************/
void enable_timer( char timer_num )
{
    if ( timer_num == 0 )
    {
		T0TCR = 1;
    }
    else
    {
		T1TCR = 1;
    }
    return;
}

/******************************************************************************
** Function name:		disable_timer
**
** Descriptions:		Disable timer
**
** parameters:			timer number: 0 or 1
** Returned value:		None
** 
******************************************************************************/
void disable_timer( char timer_num )
{
    if ( timer_num == 0 )
    {
		T0TCR = 0;
    }
    else
    {
		T1TCR = 0;
    }
    return;
}

/******************************************************************************
** Function name:		reset_timer
**
** Descriptions:		Reset timer
**
** parameters:			timer number: 0 or 1
** Returned value:		None
** 
******************************************************************************/
void reset_timer( char timer_num )
{
    int regVal;

    if ( timer_num == 0 )
    {
		regVal = T0TCR;
		regVal |= 0x02;
		T0TCR = regVal;
    }
    else
    {
		regVal = T1TCR;
		regVal |= 0x02;
		T1TCR = regVal;
    }
    return;
} 

/******************************************************************************
** Function name:		init_timer
**
** Descriptions:		Initialize timer, set timer interval, reset timer,
**						install timer interrupt handler
**
** parameters:			None
** Returned value:		true or false, if the interrupt handler can't be
**						installed, return false.
** 
******************************************************************************/
int init_timer ( int TimerInterval ) 
{
 350:	b500      	push	{lr}
    timer_counter = 0;
 352:	4a0c      	ldr	r2, [pc, #48]	(384 <.text+0x384>)
 354:	2300      	movs	r3, #0
 356:	6013      	str	r3, [r2, #0]
    T0MR0 = TimerInterval;
 358:	4b0b      	ldr	r3, [pc, #44]	(388 <.text+0x388>)
    T0MCR = 3;				/* Interrupt and Reset on MR0*/ 
 35a:	2203      	movs	r2, #3
 35c:	6018      	str	r0, [r3, #0]
 35e:	3b04      	subs	r3, #4
 360:	601a      	str	r2, [r3, #0]
    if ( install_irq( 4, (void *)Timer0Handler, 0x01 ) == FALSE )
 362:	490a      	ldr	r1, [pc, #40]	(38c <.text+0x38c>)
 364:	2201      	movs	r2, #1
 366:	2004      	movs	r0, #4
 368:	f7ff ffc0 	bl	2ec <install_irq>
 36c:	2200      	movs	r2, #0
 36e:	2800      	cmp	r0, #0
 370:	d100      	bne.n	374 <init_timer+0x24>
 372:	2201      	movs	r2, #1
 374:	2301      	movs	r3, #1
 376:	1c10      	adds	r0, r2, #0
 378:	4058      	eors	r0, r3
 37a:	0600      	lsls	r0, r0, #24
 37c:	0e00      	lsrs	r0, r0, #24
    {
		return (FALSE);
    }
   else
    {
		return (TRUE);
    }
}
 37e:	bc02      	pop	{r1}
 380:	4708      	bx	r1
 382:	0000      	lsls	r0, r0, #0
 384:	0000      	lsls	r0, r0, #0
 386:	4000      	ands	r0, r0
 388:	4018      	ands	r0, r3
 38a:	e000      	b.n	38e <.text+0x38e>
 38c:	032d      	lsls	r5, r5, #12
	...

00000390 <TargetResetInit>:

/**********************************************************************************************************
			Routine to set processor and pheripheral clock 
***********************************************************************************************************/
void  TargetResetInit(void)
{
 390:	b530      	push	{r4, r5, lr}
  // 72 Mhz Frequency
  if ((PLLSTAT & 0x02000000) > 0)
 392:	4b2e      	ldr	r3, [pc, #184]	(44c <.text+0x44c>)
 394:	681b      	ldr	r3, [r3, #0]
 396:	019a      	lsls	r2, r3, #6
 398:	d509      	bpl.n	3ae <TargetResetInit+0x1e>
  {
      /* If the PLL is already running   */
      PLLCON  &= ~0x02;                          /* Disconnect the PLL                                       */
 39a:	492d      	ldr	r1, [pc, #180]	(450 <.text+0x450>)
 39c:	680b      	ldr	r3, [r1, #0]
 39e:	2202      	movs	r2, #2
 3a0:	4393      	bics	r3, r2
      PLLFEED  =  0xAA;                          /* PLL register update sequence, 0xAA, 0x55                 */
 3a2:	4a2c      	ldr	r2, [pc, #176]	(454 <.text+0x454>)
 3a4:	600b      	str	r3, [r1, #0]
 3a6:	23aa      	movs	r3, #170
 3a8:	6013      	str	r3, [r2, #0]
      PLLFEED  =  0x55;
 3aa:	2355      	movs	r3, #85
 3ac:	6013      	str	r3, [r2, #0]
  }
  PLLCON   &= ~0x01;                            /* Disable the PLL                                          */
 3ae:	4928      	ldr	r1, [pc, #160]	(450 <.text+0x450>)
 3b0:	680b      	ldr	r3, [r1, #0]
 3b2:	2201      	movs	r2, #1
 3b4:	4393      	bics	r3, r2
  PLLFEED   =  0xAA;                           /* PLL register update sequence, 0xAA, 0x55                 */
 3b6:	4a27      	ldr	r2, [pc, #156]	(454 <.text+0x454>)
 3b8:	600b      	str	r3, [r1, #0]
 3ba:	23aa      	movs	r3, #170
 3bc:	6013      	str	r3, [r2, #0]
  PLLFEED   =  0x55;
 3be:	2355      	movs	r3, #85
 3c0:	6013      	str	r3, [r2, #0]
  SCS      &= ~0x10;                         /* OSCRANGE = 0, Main OSC is between 1 and 20 Mhz           */
 3c2:	4925      	ldr	r1, [pc, #148]	(458 <.text+0x458>)
 3c4:	680b      	ldr	r3, [r1, #0]
 3c6:	2210      	movs	r2, #16
 3c8:	4393      	bics	r3, r2
 3ca:	600b      	str	r3, [r1, #0]
  SCS      |=  0x20;                         /* OSCEN = 1, Enable the main oscillator                    */
 3cc:	680b      	ldr	r3, [r1, #0]
 3ce:	2220      	movs	r2, #32
 3d0:	4313      	orrs	r3, r2
 3d2:	600b      	str	r3, [r1, #0]
  while ((SCS &  0x40) == 0);
 3d4:	4b20      	ldr	r3, [pc, #128]	(458 <.text+0x458>)
 3d6:	681b      	ldr	r3, [r3, #0]
 3d8:	065a      	lsls	r2, r3, #25
 3da:	d5fb      	bpl.n	3d4 <TargetResetInit+0x44>
  CLKSRCSEL = 0x01;                         /* Select main OSC, 12MHz, as the PLL clock source          */
 3dc:	4b1f      	ldr	r3, [pc, #124]	(45c <.text+0x45c>)
 3de:	2501      	movs	r5, #1
  PLLCFG    = (24 << 0) | (1 << 16);         /* Configure the PLL multiplier and divider                 */   
 3e0:	4a1f      	ldr	r2, [pc, #124]	(460 <.text+0x460>)
 3e2:	601d      	str	r5, [r3, #0]
 3e4:	3b88      	subs	r3, #136
 3e6:	601a      	str	r2, [r3, #0]
  PLLFEED   = 0xAA;                         /* PLL register update sequence, 0xAA, 0x55                 */
 3e8:	4a1a      	ldr	r2, [pc, #104]	(454 <.text+0x454>)
 3ea:	24aa      	movs	r4, #170
  PLLFEED   = 0x55;
 3ec:	2055      	movs	r0, #85
 3ee:	6014      	str	r4, [r2, #0]
  PLLCON   |= 0x01;                        /* Enable the PLL                                           */
 3f0:	4917      	ldr	r1, [pc, #92]	(450 <.text+0x450>)
 3f2:	6010      	str	r0, [r2, #0]
 3f4:	680b      	ldr	r3, [r1, #0]
 3f6:	432b      	orrs	r3, r5
 3f8:	600b      	str	r3, [r1, #0]
  PLLFEED   = 0xAA;                        /* PLL register update sequence, 0xAA, 0x55                 */
  PLLFEED   = 0x55;
  CCLKCFG   = 3;                        /* Configure the ARM Core Processor clock divider           */
 3fa:	4b1a      	ldr	r3, [pc, #104]	(464 <.text+0x464>)
 3fc:	6014      	str	r4, [r2, #0]
 3fe:	6010      	str	r0, [r2, #0]
 400:	2203      	movs	r2, #3
 402:	601a      	str	r2, [r3, #0]
  USBCLKCFG = 5;                    /* Configure the USB clock divider                          */
 404:	2205      	movs	r2, #5
 406:	3304      	adds	r3, #4
 408:	601a      	str	r2, [r3, #0]
  while ((PLLSTAT & 0x04000000) == 0);  
 40a:	4b10      	ldr	r3, [pc, #64]	(44c <.text+0x44c>)
 40c:	681b      	ldr	r3, [r3, #0]
 40e:	015a      	lsls	r2, r3, #5
 410:	d5fb      	bpl.n	40a <Stack_Size+0xa>
  PCLKSEL0  = 0xAAAAAAAA;                     /* Set peripheral clocks to be half of main clock           */
 412:	4a15      	ldr	r2, [pc, #84]	(468 <.text+0x468>)
 414:	4b15      	ldr	r3, [pc, #84]	(46c <.text+0x46c>)
 416:	601a      	str	r2, [r3, #0]
  PCLKSEL1  = 0x22AAA8AA;
 418:	4a15      	ldr	r2, [pc, #84]	(470 <.text+0x470>)
 41a:	3304      	adds	r3, #4
 41c:	601a      	str	r2, [r3, #0]
  PLLCON   |= 0x02;                         /* Connect the PLL. The PLL is now the active clock source  */
 41e:	490c      	ldr	r1, [pc, #48]	(450 <.text+0x450>)
 420:	680b      	ldr	r3, [r1, #0]
 422:	2202      	movs	r2, #2
 424:	4313      	orrs	r3, r2
  PLLFEED   = 0xAA;                          /* PLL register update sequence, 0xAA, 0x55                 */
 426:	4a0b      	ldr	r2, [pc, #44]	(454 <.text+0x454>)
 428:	600b      	str	r3, [r1, #0]
 42a:	23aa      	movs	r3, #170
 42c:	6013      	str	r3, [r2, #0]
  PLLFEED   = 0x55;
 42e:	2355      	movs	r3, #85
 430:	6013      	str	r3, [r2, #0]
  while ((PLLSTAT & 0x02000000) == 0);  
 432:	4b06      	ldr	r3, [pc, #24]	(44c <.text+0x44c>)
 434:	681b      	ldr	r3, [r3, #0]
 436:	019a      	lsls	r2, r3, #6
 438:	d5fb      	bpl.n	432 <Stack_Size+0x32>
  PCLKSEL0 = 0x55555555;  		     /* PCLK is the same as CCLK */
 43a:	4b0e      	ldr	r3, [pc, #56]	(474 <.text+0x474>)
 43c:	4a0b      	ldr	r2, [pc, #44]	(46c <.text+0x46c>)
 43e:	6013      	str	r3, [r2, #0]
  PCLKSEL1 = 0x55555555;  
 440:	3204      	adds	r2, #4
 442:	6013      	str	r3, [r2, #0]
}
 444:	bc30      	pop	{r4, r5}
 446:	bc01      	pop	{r0}
 448:	4700      	bx	r0
 44a:	0000      	lsls	r0, r0, #0
 44c:	c088      	stmia	r0!, {r3, r7}
 44e:	e01f      	b.n	490 <_edata+0x18>
 450:	c080      	stmia	r0!, {r7}
 452:	e01f      	b.n	494 <_edata+0x1c>
 454:	c08c      	stmia	r0!, {r2, r3, r7}
 456:	e01f      	b.n	498 <_edata+0x20>
 458:	c1a0      	stmia	r1!, {r5, r7}
 45a:	e01f      	b.n	49c <_edata+0x24>
 45c:	c10c      	stmia	r1!, {r2, r3}
 45e:	e01f      	b.n	4a0 <_edata+0x28>
 460:	0018      	lsls	r0, r3, #0
 462:	0001      	lsls	r1, r0, #0
 464:	c104      	stmia	r1!, {r2}
 466:	e01f      	b.n	4a8 <_edata+0x30>
 468:	aaaa      	add	r2, sp, #680
 46a:	aaaa      	add	r2, sp, #680
 46c:	c1a8      	stmia	r1!, {r3, r5, r7}
 46e:	e01f      	b.n	4b0 <_edata+0x38>
 470:	a8aa      	add	r0, sp, #680
 472:	22aa      	movs	r2, #170
 474:	5555      	strb	r5, [r2, r5]
 476:	5555      	strb	r5, [r2, r5]
